// números dos pinos
int trigger = 7;
int eco = 8;
int buzzer = 11;

// variáveis
long duracao;
float dist;

void setup() {
 pinMode(trigger, OUTPUT); // Configura o pino trigger como saída
 pinMode(eco, INPUT); // Configura o pino eco como entrada.
 pinMode(buzzer, OUTPUT);
 Serial.begin(9600); // Inicia a comunicação serial
}

void loop() {
 // Limpa o trigger
 digitalWrite(trigger, LOW);
 delayMicroseconds(5);

 // Configurar o trigger para nível alto para transmissão de sinais
 digitalWrite(trigger, HIGH);
 delayMicroseconds(10); // tempo para envio do sinal
 digitalWrite(trigger, LOW);

 //contagem de tempo e lê o pino de eco
 duracao = pulseIn(eco, HIGH);

 // Calcular a distância
 dist = duracao * 0.034 / 2;

 // Mostrar a distância no monitor serial
 if (dist >= 400 || dist <= 2) {
   Serial.println("Valor fora do alcance");
 }
 else {
   Serial.print("Distancia em cm: ");
   Serial.println(dist);
 }
 
 //Neste caso o buzzer começa a tocar qnd a distância é menor q 20cm e fica mais agudo enquanto se aproxima.
 //Para deixar um único som padrão, troca a função tone por digitalWrite e faz os ajustes nas condições(tira os "else if").
 
 if(dist<20 && dist>=18){
  //digitalWrite(buzzer,HIGH);
  tone(buzzer,200);
 }
 else if(dist<18 && dist>=16){
  tone(buzzer,300);
 }
 else if(dist<16 && dist>=14){
  tone(buzzer,380);
 }
  else if(dist<14 && dist>=12){
  tone(buzzer,460);
 }
 else if(dist<12 && dist>=10){
  tone(buzzer,600);
 }
 else if(dist<10 && dist>=7){
  tone(buzzer,730);
 }
 else if(dist<7 && dist>=5){
  tone(buzzer,840);
 }
 else if(dist<5 && dist>=2){
  tone(buzzer,950);
 }
 else{
  //digitalWrite(buzzer,LOW);
  noTone(buzzer);
 }
 // Aguardar 100ms antes da próxima leitura para evitar interferência
 delay(100);
}
